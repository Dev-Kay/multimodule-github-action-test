name: Deploy222

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      is-manual:
        type: choice
        required: true
        default: true
        options:
          - true

run-name: ${{ github.workflow }} ${{ github.event.inputs.is-manual && ' | MANUAL' || ''}}

concurrency:
  group: deploy-${{ github.event.inputs.int-env }}-${{ github.event.inputs.app }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  apps: |
    {
       "include": [
          {
              "app": "admin",
              "name": "ADMIN"
          },
          {
              "app": "batch",
              "name": "BATCH"
          },
          {
              "app": "api",
              "name": "API"
          }
       ]
    }
  

jobs:
  filter-build-targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.check.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Filtering
        id: check
        run: |
          # Parse `env.apps` into a JSON object
          apps_json='${{ env.apps }}'
          
          # Initialize matrix JSON
          matrix_json='{"include": []}'
          
          # Check if there's any data change or manual trigger
          DATA_CHANGED=$(git diff --name-only HEAD~1 | grep -q '^data/' && echo true || echo false)
          
          if $DATA_CHANGED || ${{ github.event.inputs.is-manual || false }}; then
            # Include all apps if manual trigger or data changes exist
            echo "전체 빌드"
            matrix_json=$(echo "$apps_json" | jq -c .)
          else
            # Filter apps based on changes in corresponding directories
            for row in $(echo "$apps_json" | jq -c '.include[]'); do
              app=$(echo "$row" | jq -r '.app')
              if git diff --name-only HEAD^ HEAD | grep -q "^${app}/"; then
                matrix_json=$(echo "$matrix_json" | jq --argjson app_row "$row" '.include += [$app_row]')
              fi
            done
          fi
          
          # Output the resulting matrix JSON
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
      - name: Print
        run: echo "${{ fromJson(steps.check.outputs.matrix).include[0] }}"

  build-and-deploy:
    if: ${{ fromJson(needs.filter-build-targets.outputs.matrix).include[0] != '' }}
    needs: filter-build-targets
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.filter-build-targets.outputs.matrix) }}
    steps:
      - name: Print
        run: |
          echo "${{ matrix.app }}"
          echo "${{ matrix.name }}"
